package cmp

import (
	"encoding/asn1"
	"encoding/base64"
	"fmt"
	"log"
	"math/big"
	"ra/consts"
	"testing"
)

type pkiMessageCP1 struct {
	Raw        asn1.RawContent
	Header     PKIHeader
	Body       certRepMessage `asn1:"explicit,tag:3"`
	Protection PKIProtection  `asn1:"explicit,tag:0"`
	ExtraCerts []certificate  `asn1:"tag:1"`
}

type RS struct {
	R *big.Int
	S *big.Int
}

func TestParsePKIBodyCP(x *testing.T) {
	b64 := `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`
	raw1, err := base64.StdEncoding.DecodeString(b64)
	if err != nil {
		log.Fatal(err)
	}

	{
		consts.InitConstsForRaBusiness()
		cp, err := ParsePKIBodyCP(raw1)
		if err != nil {
			log.Fatal(err)
		}
		err = cp.VerifyByRoot(consts.RootCAPool)
		if err != nil {
			log.Fatal(err)
		}
		for _, resp := range cp.Body.Responses {
			meta, err := resp.GetCertWithEncValue()
			if err != nil {
				log.Fatal(err)
			}
			if meta.EncPriv != nil {
				fmt.Printf("enc symm key: %x\n", meta.EncPriv.EncSymmKey.Bytes)
				fmt.Println(base64.StdEncoding.EncodeToString(meta.EncPriv.EncSymmKey.Bytes))
				fmt.Printf("enc vlaue: %b\n", meta.EncPriv.EncValue)
				fmt.Println(base64.StdEncoding.EncodeToString(meta.EncPriv.EncValue.Bytes))

				fmt.Println(base64.StdEncoding.EncodeToString(meta.EncPriv.KeyAlg.Parameters.Bytes))
			}
			//fmt.Printf("cert: %x\n", meta.Cert)
		}
	}

}
